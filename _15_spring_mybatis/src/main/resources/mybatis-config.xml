<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--引入properties文件，此时就可以${属性名}的方式访问属性值-->
    <properties resource="jdbc.properties"/>

    <!--设置类型别名-->
    <typeAliases>
        <!--
            typeAlias：设置某个类型的别名
            属性：
                type：需要设置别名的类型
                alias：类型的别名（不区分大小写）；若不设置该属性，那么该类型拥有默认的别名，即不区分大小写的类名
        -->
        <!--<typeAlias type="org.example.pojo.User"></typeAlias>-->

        <!--以包为单位，包下所有的类型均设置默认的类型别名，即不区分大小写的类名-->
        <package name="org.example.domain"/>
    </typeAliases>

    <!--
        environments：配置多个连接数据库的环境
        属性 default：设置默认使用的环境的id
    -->
    <environments default="development">
        <!--
            environment：配置某个具体的环境
            属性 id：表示连接数据库的环境的唯一标识，不能重复
        -->
        <environment id="development">

            <!--
                transactionManager：设置事务管理方式
                属性：
                    type="JDBC|MANAGED"
                    JDBC：表示当前环境中，执行SQL时使用的是 JDBC 中原生的事务管理方式，事务的提交或回滚需要手动处理
                    MANAGED：被管理. 例如交给 Spring 管理
            -->
            <transactionManager type="JDBC"/>

            <!--
                dataSource：配置数据源
                属性：
                    type：设置数据源的类型
                    type="POOLED|UNPOOLED|JNDI"
                    POOLED：表示使用数据库连接池缓存数据库连接，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建
                    UNPOOLED：表示不使用数据库连接池，即每次使用连接都需要重新创建
                    JNDI：表示使用上下文中的数据源
            -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--引入映射文件-->
    <mappers>

<!--
    不在 package 包路径 main/java 下面，而是在 main/resources 路径下面，需要用普通目录的形式来引入
-->
        <!--以包为单位引入映射文件-->
        <package name="org.example.dao"/>
    </mappers>
</configuration>
